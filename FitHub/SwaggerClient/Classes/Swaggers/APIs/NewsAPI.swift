//
// NewsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NewsAPI {
    /**
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiNewsAddPost(body: AddNewsRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiNewsAddPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/News/add
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiNewsAddPostWithRequestBuilder(body: AddNewsRequest? = nil) -> RequestBuilder<Void> {
        let path = "/api/News/add"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter page: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiNewsGetPageGet(page: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiNewsGetPageGetWithRequestBuilder(page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/News/get/{page}
     - parameter page: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiNewsGetPageGetWithRequestBuilder(page: Int) -> RequestBuilder<Void> {
        var path = "/api/News/get/{page}"
        let pagePreEscape = "\(page)"
        let pagePostEscape = pagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page}", with: pagePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiNewsGetRecomendsUserIdGet(userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiNewsGetRecomendsUserIdGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/News/get_recomends/{userId}
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiNewsGetRecomendsUserIdGetWithRequestBuilder(userId: UUID) -> RequestBuilder<Void> {
        var path = "/api/News/get_recomends/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
